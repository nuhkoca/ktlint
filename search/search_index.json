{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Ktlint","text":"<p> Kotlin linter in spirit of feross/standard (JavaScript) and gofmt (Go).   </p>"},{"location":"#features","title":"Features","text":"<ul> <li>No configuration required <code>ktlint</code> aims to capture the official Kotlin coding conventions and Android Kotlin Style Guide. In some aspects <code>ktlint</code> is a bit more strict*.</li> <li>Rule sets <code>ktlint</code> offers a <code>standard</code> and an <code>experimental</code> rule set. Next to this, it is easy to provide custom rule sets.</li> <li>.editorconfig   Some rules do allow further configuration, but in all cases a reasonable default is set when not provided. <code>ktlint</code> primarily uses the .editorconfig file to read default <code>.editorconfig</code>, IntelliJ IDEA specific and Ktlint specific properties.</li> <li>Disable rules   If need be, rules can be disabled easily*.</li> <li>Built-in formatter   Most lint violations don't need to be fixed manually. <code>ktlint</code> has a built-in formatter which fixes violations when possible. Some violations can not be fixed in a deterministic way, and need manual action.</li> <li>Customizable output   Several reporters are available out-of-the-box: <code>plain</code> (+ <code>plain?group_by_file</code>), <code>plain-summary</code>, <code>json</code>, <code>html</code> and <code>checkstyle</code>.   It's also easy to create a custom reporter.</li> <li>Executable jar <code>ktlint</code> is released as a single executable jar with all dependencies included.</li> </ul>"},{"location":"#legal","title":"Legal","text":"<p>This project is not affiliated with nor endorsed by JetBrains. All code, unless specified otherwise, is licensed under the MIT license. Copyright \u00a9 2019 Pinterest, Inc. Copyright \u00a9 2016-2019 Stanley Shyiko.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#why-should-i-use-ktlint","title":"Why should I use ktlint?","text":"<p>the short answer is Simplicity.</p> <p>Spending time on configuration (and maintenance down the road) of hundred-line long style config file(s) is counter-productive. Instead of wasting your energy on something that has no business value - focus on what really matters (not debating whether to use tabs or spaces).</p> <p>By using ktlint you put the importance of code clarity and community conventions over personal preferences. This makes things easier for people reading your code as well as frees you from having to document and explain what style potential contributor(s) have to follow.</p> <p>ktlint is a single binary with both linter &amp; formatter included. All you need is to drop it in (no need to get overwhelmed while choosing among dozens of code style options).</p>"},{"location":"faq/#can-i-have-my-own-rules-on-top-of-ktlint","title":"Can I have my own rules on top of ktlint?","text":"<p>Absolutely, \"no configuration\" doesn't mean \"no extensibility\". You can add your own ruleset(s) to discover potential bugs, check for anti-patterns, etc.</p> <p>See adding a custom rule set for more information.</p>"},{"location":"faq/#how-do-i-suppress-errors-for-a-lineblockfile","title":"How do I suppress errors for a line/block/file?","text":"<p>Tip</p> <p>Suppressing a <code>ktlint</code> violation is meant primarily as an escape latch for the rare cases when ktlint is not able to produce the correct result. Please report any such instances using GitHub Issues).</p> <p>To disable a specific rule you'll need the rule identifier which is displayed at the end of the lint error. Note that when the rule id is prefixed with a rule set id like <code>experimental</code>, you will need to use that fully qualified rule id.</p> <p>An error can be suppressed using:</p> <ul> <li>EOL comments</li> <li>Block comments</li> <li>@Suppress annotations</li> </ul> <p>From a consistency perspective seen, it might be best to not mix the (EOL/Block) comment style with the annotation style in the same project.</p> <p>Warning</p> <p>Some rules like the <code>indent</code> rule do not (yet) support disabling of the rule per line or block. It can be disabled for an entire file though. </p>"},{"location":"faq/#disabling-for-one-specific-line-using-eol-comment","title":"Disabling for one specific line using EOL comment","text":"<p>An error for a specific rule on a specific line can be disabled with an EOL comment on that line:</p> <pre><code>import package.* // ktlint-disable no-wildcard-imports\n</code></pre> <p>In case lint errors for different rules on the same line need to be ignored, then specify multiple rule ids (separated by a space):</p> <pre><code>import package.* // ktlint-disable no-wildcard-imports other-rule-id\n</code></pre> <p>In case all lint errors on a line need to be ignored, then do not specify the rule id at all:</p> <pre><code>import package.* // ktlint-disable\n</code></pre>"},{"location":"faq/#disabling-for-a-block-of-lines-using-block-comments","title":"Disabling for a block of lines using Block comments","text":"<p>An error for a specific rule in a block of lines can be disabled with an block comment like:</p> <pre><code>/* ktlint-disable no-wildcard-imports */\nimport package.a.*\nimport package.b.*\n/* ktlint-enable no-wildcard-imports */\n</code></pre> <p>In case lint errors for different rules in the same block of lines need to be ignored, then specify multiple rule ids (separated by a space):</p> <pre><code>/* ktlint-disable no-wildcard-imports other-rule-id */\nimport package.a.*\nimport package.b.*\n/* ktlint-enable no-wildcard-imports,other-rule-id */\n</code></pre> <p>Note that the <code>ktlint-enable</code> directive needs to specify the exact same rule-id's and in the same order as the <code>ktlint-disable</code> directive.</p> <p>In case all lint errors in a block of lines needs to be ignored, then do not specify the rule id at all:</p> <pre><code>/* ktlint-disable */\nimport package.a.*\nimport package.b.*\n/* ktlint-enable */\n</code></pre>"},{"location":"faq/#disabling-for-a-statement-or-an-entire-file-using-suppress","title":"Disabling for a statement or an entire file using @Suppress","text":"<p>Tip</p> <p>As of ktlint version 0.46, it is possible to specify any ktlint rule id via the <code>@Suppress</code> annotation in order to suppress errors found by that rule. Note that some rules like <code>indent</code> still do not support disabling for parts of a file.</p> <p>An error for a specific rule on a specific line can be disabled with a <code>@Suppress</code> annotation:</p> <pre><code>@Suppress(\"ktlint:max-line-length\",\"ktlint:experimental:trailing-comma-on-call-site\")\nval foo = listOf(\n\"some really looooooooooooooooong string exceeding the max line length\",\n)\n</code></pre> <p>Note that when using <code>@Suppress</code> each qualified rule id needs to be prefixed with <code>ktlint:</code>.</p> <p>To suppress the violations of all ktlint rules, use: <pre><code>@Suppress(\"ktlint\")\nval foo = \"some really looooooooooooooooong string exceeding the max line length\"\n</code></pre></p> <p>Like with other <code>@Suppress</code> annotations, it can be placed on targets supported by the annotation. As of this it is possible to disable rules in the entire file with: <pre><code>@file:Suppress(\"ktlint\") // Suppressing all rules for the entire file\n// or\n@file:Suppress(\"ktlint:max-line-length\",\"ktlint:experimental:trailing-comma\") // Suppressing specific rules for the entire file\n</code></pre></p>"},{"location":"faq/#how-do-i-globally-disable-a-rule","title":"How do I globally disable a rule?","text":"<p>With <code>.editorConfig</code> property <code>disabled_rules</code> a rule can be disabled globally.</p> <p>You may also pass a list of disabled rules via the <code>--disabled_rules</code> command line flag. It has the same syntax as the EditorConfig property.</p>"},{"location":"faq/#why-is-editorconfig-property-disabled_rules-deprecated-and-how-do-i-resolve-this","title":"Why is <code>.editorconfig</code> property <code>disabled_rules</code> deprecated and how do I resolve this?","text":"<p>The <code>.editorconfig</code> properties <code>disabled_rules</code> and <code>ktlint_disbaled_rules</code> are deprecated as of KtLint version <code>0.48</code> and are marked for removal in version <code>0.49</code>. Those properties contain a comma separated list of rules which are disabled. Using a comma separated list of values has some disadvantages.</p> <p>A big disadvantage is that it is not possible to override the property partially in an <code>.editorconfig</code> file in a subpackage. Another disadvantage is that it is not possible to express explicitly that a rule is enabled. Lastly, (qualified) rule ids can be 20 characters or longer, which makes a list with multiple entries hard to read.</p> <p>Root <code>.editorconfig</code> <pre><code>root = true\n\n[*.kt]\ndisabled_rules=rule-1,rule-2,rule-3\n</code></pre> This <code>.editorconfig</code> defines that all rules except <code>rule-1</code>, <code>rule-2</code> and <code>rule-3</code> should be run in all packages. Suppose that we want to enable <code>rule-1</code> but disable <code>rule-4</code> in certain subpackage, then we would need to define an <code>.editorconfig</code> file like below:</p> <p>Secondary <code>.editorconfig</code> <pre><code>[*.kt]\ndisabled_rules=rule-2,rule-4,rule-3\n</code></pre> Disabling another rule in the root <code>.editorconfig</code> file, does not have effect on this subpackage as long as that rule has not been added to the <code>.editorconfig</code> file in the subpackage. </p> <p>Starting with KtLint <code>0.48</code> entire rule sets and individual rules can be disabled / enabled with a separate property per rule (set). </p> <p>All rules in a rule set can be enabled or disabled with a rule set property. The name of the rule set property consists of the <code>ktlint_</code> prefix followed by the rule set id. Examples: <pre><code>ktlint_standard = disabled # Disable all rules from the `standard` rule set provided by KtLint\nktlint_experimental = enabled # Enable all rules from the `experimental` rule set provided by KtLint\nktlint_your-custom-rule-set_custom-rule = enabled # Enable all rules in the `custom-rule-set` rule set (not provided by KtLint)\n</code></pre></p> <p>Note</p> <p>All rules from the <code>standard</code> and custom rule sets are enabled by default and can optionally be disabled in the <code>.editorconfig</code>. All rules from the <code>experimental</code> rule set are disabled by default and can optionally be enabled in the <code>.editorconfig</code>.</p> <p>An individual property can be enabled or disabled with a rule property. The name of the rule property consists of the <code>ktlint_</code> prefix followed by the rule set id followed by a <code>_</code> and the rule id. Examples: <pre><code>ktlint_standard_final-newline = disabled # Disables the `final-newline` rule in the `standard` rule set provided by KtLint\nktlint_experimental_type-argument-list-spacing = enabled # Enables the `type-argument-list-spacing` rule in the `experimental` rule set provided by KtLint\nktlint_custom-rule-set_custom-rule = disabled # Disables the `custom-rule` rule in the `custom-rule-set` rule set (not provided by KtLint)\n</code></pre></p> <p>Note</p> <p>The rule properties are applied after applying the rule set properties and take precedence. So if a rule set is disabled but a specific rule of that rule set is enabled, then the rule will be executed.  </p>"},{"location":"readme/","title":"Build &amp; test documentation on local machine","text":"<p>The documentation of ktlint is served with mkdocs-material. For full documentation visit mkdocs.org.</p> <p>To build and test documentation on your local development machine, follow steps below:</p>"},{"location":"readme/#setup","title":"Setup","text":"<ol> <li>In IntelliJ IDEA<ul> <li>Open <code>Preferences</code></li> <li>Search for <code>JSON Schema mappings</code></li> <li>Add new schema for url <code>https://squidfunk.github.io/mkdocs-material/schema.json</code> and add file <code>mkdocs.yml</code> for this url.</li> </ul> </li> <li>Pull docker image    <pre><code>$ docker pull squidfunk/mkdocs-material\n</code></pre></li> </ol>"},{"location":"readme/#build-server","title":"Build server","text":"<p>The following steps build and host the documentation locally, updating automatically whenever a local file is changed.</p> <ol> <li>Start mkdocs server from root of project (e.g. from same directory where file mkdocs.yml is located)    <pre><code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material\n</code></pre></li> <li>Visit page <code>http://0.0.0.0:8000/</code> in your browser.</li> <li>Edit the documentation and explicitly save the file. The mkdocs server refreshes its cached and the current page in the browser is automatically refreshed.</li> </ol>"},{"location":"readme/#build-once","title":"Build once","text":"<p>If you do not want to run a local server, or if you want to inspect the built files, you can run the following command from the project's main directory to build the documentation in the <code>site/</code> directory.</p> <pre><code>docker run --rm -it -p 8000:8000 -v ${PWD}:/docs squidfunk/mkdocs-material build\n</code></pre>"},{"location":"contributing/","title":"Index","text":""},{"location":"contributing/#contributing-guidelines","title":"Contributing guidelines","text":""},{"location":"contributing/code-of-conduct/","title":"Code of conduct","text":"<p>At Pinterest, we work hard to ensure that our work environment is welcoming and inclusive to as many people as possible. We are committed to creating this environment for everyone involved in our open source projects as well. We welcome all participants regardless of ability, age, ethnicity, identified gender, religion (or lack there of), sexual orientation and socioeconomic status.</p> <p>This code of conduct details our expectations for upholding these values.</p>"},{"location":"contributing/code-of-conduct/#good-behavior","title":"Good behavior","text":"<p>We expect members of our community to exhibit good behavior including (but of course not limited to):</p> <ul> <li>Using intentional and empathetic language.</li> <li>Focusing on resolving instead of escalating conflict.</li> <li>Providing constructive feedback.</li> </ul>"},{"location":"contributing/code-of-conduct/#unacceptable-behavior","title":"Unacceptable behavior","text":"<p>Some examples of unacceptable behavior (again, this is not an exhaustive list):</p> <ul> <li>Harassment, publicly or in private.</li> <li>Trolling.</li> <li>Sexual advances (this isn\u2019t the place for it).</li> <li>Publishing other\u2019s personal information.</li> <li>Any behavior which would be deemed unacceptable in a professional environment.</li> </ul>"},{"location":"contributing/code-of-conduct/#recourse","title":"Recourse","text":"<p>If you are witness to or the target of unacceptable behavior, it should be reported to Pinterest at opensource-policy@pinterest.com. All reporters will be kept confidential and an appropriate response for each incident will be evaluated.</p> <p>If the maintainers do not uphold and enforce this code of conduct in good faith, community leadership will hold them accountable.</p>"},{"location":"contributing/guidelines/","title":"Guidelines","text":"<p>First off, thanks for taking the time to contribute! This guide will answer some common questions about how this project works.</p> <p>While this is a Pinterest open source project, we welcome contributions from everyone. Regular outside contributors can become project maintainers.</p>"},{"location":"contributing/guidelines/#help","title":"Help","text":"<p>If you're having trouble using this project, please start by reading all documentation and searching for solutions in the existing open and closed issues.</p>"},{"location":"contributing/guidelines/#security","title":"Security","text":"<p>If you've found a security issue in one of our open source projects, please report it at Bugcrowd; you may even make some money!</p>"},{"location":"contributing/guidelines/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be sure to read and understand our code of conduct. We work hard to ensure that our projects are welcoming and inclusive to as many people as possible.</p>"},{"location":"contributing/guidelines/#reporting-issues","title":"Reporting Issues","text":"<p>If you have a bug report, please provide as much information as possible so that we can help you out:</p> <ul> <li>Version of the project you're using.</li> <li>Code (or even better a sample project) which reproduce the issue.</li> <li>Steps which reproduce the issue.</li> <li>Stack traces for crashes.</li> <li>Any logs produced.</li> </ul>"},{"location":"contributing/guidelines/#making-changes","title":"Making Changes","text":"<p>Tip</p> <p><code>ktlint</code> only provides rules that enforce the Kotlin coding conventions or Android Kotlin style guide. If your change is more opinionated than please file an issue first so that it can be discussed amongst the community. Rules which are too opinionated might be better published as a custom rule set. </p> <ol> <li>Fork this repository to your own account</li> <li>Make your changes and verify that tests pass</li> <li>Commit your work and push to a new branch on your fork</li> <li>Submit a pull request</li> <li>Participate in the code review process by responding to feedback</li> </ol> <p>Once there is agreement that the code is in good shape, one of the project's maintainers will merge your contribution.</p> <p>To increase the chances that your pull request will be accepted:</p> <ul> <li>Follow the coding style</li> <li>Write tests for your changes</li> <li>Write a good commit message</li> <li>Provide context in the pull request description.</li> </ul> <p>New rules will be added first to the <code>experimental</code> rule set before being promoted to the <code>standard</code> rule set.</p>"},{"location":"contributing/guidelines/#updating-dependencies","title":"Updating dependencies","text":"<p>This project has enabled Gradle dependencies verification. On adding/updating any dependency, ensure that you've added dependency provided checksum/signature to <code>gradle/verification-metadata.xml</code> file.</p>"},{"location":"contributing/guidelines/#using-kotlin-development-versions","title":"Using kotlin development versions","text":"<p>Add following flag - <code>-PkotlinDev</code> to enable kotlin development version.</p>"},{"location":"contributing/guidelines/#license","title":"License","text":"<p>By contributing to this project, you agree that your contributions will be licensed under its license.</p>"},{"location":"contributing/overview/","title":"Overview","text":"<p>Important</p> <p>Make sure to read the Contributing guideline and the code of conduct first.</p>"},{"location":"contributing/overview/#development","title":"Development","text":"<p>Development starts with cloning and building the project on your local machine:</p> <pre><code>git clone https://github.com/pinterest/ktlint &amp;&amp; cd ktlint\n./gradlew tasks # shows how to build, test, run, etc. project\n</code></pre> <p>Tip</p> <p>To open and run <code>ktlint</code> in Intellij IDEA:  </p> <ul> <li>File -&gt; Open....      </li> <li>You'll also need to set the \"Project language level\" to 8 in \"Project Settings\" (File -&gt; Project Structure... -&gt; Project).    </li> <li>To run <code>ktlint</code> - right-click on <code>ktlint/src/main/kotlin/com/pinterest/ktlint/Main.kt</code> -&gt; Run.</li> </ul>"},{"location":"extensions/badge/","title":"Badge","text":"<p>If you want to display a badge to show that your project is linted and formatted using <code>'ktlint</code> than you can add the   badge:</p> Ktlint code style badge<pre><code>[![ktlint](https://img.shields.io/badge/ktlint%20code--style-%E2%9D%A4-FF4081)](https://pinterest.github.io/ktlint/)\n</code></pre>"},{"location":"extensions/custom-reporter/","title":"Custom reporter","text":""},{"location":"extensions/custom-reporter/#build-a-custom-reporter","title":"Build a custom reporter","text":"<p>Take a look at ktlint-reporter-plain.</p> <p>In short, all you need to do is to implement a Reporter and make it available by registering a custom ReporterProvider using <code>META-INF/services/com.pinterest.ktlint.core.ReporterProvider</code>. Pack all of that into a JAR and you're done.</p> <p>To load a custom (3rd party) reporter use <code>ktlint --reporter=name,artifact=/path/to/custom-ktlint-reporter.jar</code> (see <code>ktlint --help</code> for more).</p>"},{"location":"extensions/custom-reporter/#third-party-reporters","title":"Third party reporters","text":"<p>Known third-party reporters:</p> <ul> <li>kryanod/ktlint-junit-reporter reports ktlint output as an xml file in JUnit format so that the ktlint report can be made visible on the Merge Request page.</li> <li>musichin/ktlint-github-reporter uses GitHub workflow commands to set error messages for <code>ktlint</code> issues.</li> <li>tobi2k/ktlint-gitlab-reporter provides output in JSON format that can be parsed by GitLab automatically.</li> </ul>"},{"location":"extensions/custom-rule-set/","title":"Custom rule set","text":"<p>Tip</p> <p>See Writing your first ktlint rule by Niklas Baudy.</p> <p>In a nutshell: a \"rule set\" is a JAR containing one or more Rules. <code>ktlint</code> is relying on the ServiceLoader to discover all available \"RuleSet\"s on the classpath. As a ruleset author, all you need to do is to include a <code>META-INF/services/com.pinterest.ktlint.core.RuleSetProviderV2</code> file containing a fully qualified name of your RuleSetProviderV2 implementation.</p>"},{"location":"extensions/custom-rule-set/#ktlint-ruleset-template","title":"ktlint-ruleset-template","text":"<p>A complete sample project (with tests and build files) is included in this repo under the ktlint-ruleset-template directory (make sure to check NoVarRuleTest as it contains some useful information).</p> Building the ktlint-ruleset-template<pre><code>$ cd ktlint-ruleset-template/\n$ ../gradlew build\n</code></pre> Provide code sample that violates rule `custom:no-var<pre><code>$ echo 'var v = 0' &gt; test.kt\n</code></pre> Running the ktlint-ruleset-template<pre><code>$ ktlint -R build/libs/ktlint-ruleset-template.jar --log-level=debug --relative test.kt\n\n18:13:21.026 [main] DEBUG com.pinterest.ktlint.internal.RuleSetsLoader - JAR ruleset provided with path \"/../ktlint/ktlint-ruleset-template/build/libs/ktlint-ruleset-template.jar\"\n18:13:21.241 [main] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"baseline\" id.\n18:13:21.241 [main] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"checkstyle\" id.\n18:13:21.241 [main] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"json\" id.\n18:13:21.242 [main] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"html\" id.\n18:13:21.242 [main] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"plain\" id.\n18:13:21.242 [main] DEBUG com.pinterest.ktlint.Main - Discovered reporter with \"sarif\" id.\n18:13:21.242 [main] DEBUG com.pinterest.ktlint.Main - Initializing \"plain\" reporter with {verbose=false, color=false, color_name=DARK_GRAY}\n[DEBUG] Rule with id 'standard:max-line-length' should run after the rule with id 'experimental:trailing-comma'. However, the latter rule is not loaded and is allowed to be ignored. For best results, it is advised load the rule.\n[DEBUG] Rules will be executed in order below (unless disabled):\n           - standard:filename, - standard:final-newline, - standard:chain-wrapping, - standard:colon-spacing, - standard:comma-spacing, - standard:comment-spacing, - standard:curly-spacing, - standard:dot-spacing, - standard:import-ordering, - standard:keyword-spacing, - standard:modifier-order, - standard:no-blank-line-before-rbrace, - standard:no-consecutive-blank-lines, - standard:no-empty-class-body, - standard:no-line-break-after-else, - standard:no-line-break-before-assignment, - standard:no-multi-spaces, - standard:no-semi, - standard:no-trailing-spaces, - standard:no-unit-return, - standard:no-unused-imports, - standard:no-wildcard-imports, - standard:op-spacing, - standard:parameter-list-wrapping, - standard:paren-spacing, - standard:range-spacing, - standard:string-template, - custom:no-var, - standard:indent, - standard:max-line-length\n`text test.kt:1:1: Unexpected var, use val instead (cannot be auto-corrected)`\n18:13:21.893 [main] DEBUG com.pinterest.ktlint.Main - 872ms / 1 file(s) / 1 error(s)\n</code></pre> <p>Tip</p> <p>Multiple custom rule sets can be loaded at the same time.</p>"},{"location":"extensions/custom-rule-set/#ast","title":"AST","text":"<p>While writing/debugging Rules it's often helpful to have an AST printed out to see the structure rules have to work with. ktlint &gt;= 0.15.0 has a <code>printAST</code> subcommand (or <code>--print-ast</code> flag for ktlint &lt; 0.34.0) specifically for this purpose (usage: <code>ktlint --color printAST &lt;file&gt;</code>). An example of the output is shown below.</p> <pre><code>$ printf \"fun main() {}\" | ktlint --color printAST --stdin\n\n1: ~.psi.KtFile (~.psi.stubs.elements.KtFileElementType.kotlin.FILE)\n1:   ~.psi.KtPackageDirective (~.psi.stubs.elements.KtPlaceHolderStubElementType.PACKAGE_DIRECTIVE) \"\"\n1:   ~.psi.KtImportList (~.psi.stubs.elements.KtPlaceHolderStubElementType.IMPORT_LIST) \"\"\n1:   ~.psi.KtScript (~.psi.stubs.elements.KtScriptElementType.SCRIPT)\n1:     ~.psi.KtBlockExpression (~.KtNodeType.BLOCK)\n1:       ~.psi.KtNamedFunction (~.psi.stubs.elements.KtFunctionElementType.FUN)\n1:         ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtKeywordToken.fun) \"fun\"\n1:         ~.c.i.p.impl.source.tree.PsiWhiteSpaceImpl (~.c.i.p.tree.IElementType.WHITE_SPACE) \" \"\n1:         ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtToken.IDENTIFIER) \"main\"\n1:         ~.psi.KtParameterList (~.psi.stubs.elements.KtPlaceHolderStubElementType.VALUE_PARAMETER_LIST)\n1:           ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtSingleValueToken.LPAR) \"(\"\n1:           ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtSingleValueToken.RPAR) \")\"\n1:         ~.c.i.p.impl.source.tree.PsiWhiteSpaceImpl (~.c.i.p.tree.IElementType.WHITE_SPACE) \" \"\n1:         ~.psi.KtBlockExpression (~.KtNodeType.BLOCK)\n1:           ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtSingleValueToken.LBRACE) \"{\"\n1:           ~.c.i.p.impl.source.tree.LeafPsiElement (~.lexer.KtSingleValueToken.RBRACE) \"}\"\nformat: &lt;line_number:&gt; &lt;node.psi::class&gt; (&lt;node.elementType&gt;) \"&lt;node.text&gt;\"\nlegend: ~ = org.jetbrains.kotlin, c.i.p = com.intellij.psi\n</code></pre>"},{"location":"install/api/","title":"Api","text":"<p>Note</p> <p>If you don't plan to use <code>ktlint</code>'s API then you can skip this section.</p> <p>TODO: Add to mkdocs.yml once properly documented.</p>"},{"location":"install/cli/","title":"Command line","text":"<p>Note</p> <p>If you don't plan to use <code>ktlint</code>'s command line interface then you can skip this section.</p>"},{"location":"install/cli/#download-and-verification","title":"Download and verification","text":""},{"location":"install/cli/#download-manually-from-github","title":"Download manually from github","text":"<p>All releases of <code>ktlint</code> can be downloaded from the releases page.</p>"},{"location":"install/cli/#download-using-curl","title":"Download using curl","text":"<p>A particular version of <code>ktlint</code> can be downloaded with next command which also changes the file to an executable in directory <code>/usr/local/bin</code>:</p> Download<pre><code>curl -sSLO https://github.com/pinterest/ktlint/releases/download/0.48.2/ktlint &amp;&amp; chmod a+x ktlint &amp;&amp; sudo mv ktlint /usr/local/bin/\n</code></pre> <p>Curl not installed or behind proxy</p> <p>If you don't have curl installed - replace <code>curl -sL</code> with <code>wget -qO-</code>. If you are behind a proxy see - curl / wget manpage. Usually simple: <pre><code>http_proxy=http://proxy-server:port https_proxy=http://proxy-server:port curl -sL ...\n</code></pre></p>"},{"location":"install/cli/#verification-of-download","title":"Verification of download","text":"<p><code>ktlint.asc</code> contains PGP signature which you can verify with:</p> Verify releases 0.32.0 and above<pre><code>curl -sS https://keybase.io/ktlint/pgp_keys.asc | gpg --import &amp;&amp; gpg --verify ktlint.asc\n</code></pre> Verify releases up through 0.31.0<pre><code>curl -sS https://keybase.io/shyiko/pgp_keys.asc | gpg --import &amp;&amp; gpg --verify ktlint.asc\n</code></pre>"},{"location":"install/cli/#package-managers","title":"Package managers","text":"<p><code>ktlint</code> can be installed via several OS specific package managers.</p> <p>Install with brew on macOS or Homebrew on Linux <pre><code>brew install ktlint\n</code></pre></p> <p>Install with MacPorts <pre><code>port install ktlint\n</code></pre></p> <p>On Arch Linux install package ktlint AUR.</p>"},{"location":"install/cli/#command-line-usage","title":"Command line usage","text":""},{"location":"install/cli/#rule-sets","title":"Rule set(s)","text":"<p>When no arguments are specified, the style of all Kotlin files (ending with '.kt' or '.kts') inside the current dir (recursively) are validated with the rules from the standard ruleset. Hidden folders will be skipped.</p> Default validation with standard ruleset<pre><code>ktlint\n</code></pre> <p>To validate with the standard ruleset and the experimental ruleset run command below: </p> Validation with standard and experimental ruleset<pre><code>ktlint --experimental\n</code></pre> <p>Note</p> <p>Instead of using this command line flag, you can also set <code>.editorconfig</code> property <code>ktlint_experimental = enabled</code>.</p> <p>To validate with a custom ruleset run command below:  </p> Validation with standard and a custom ruleset<pre><code>ktlint --ruleset=/path/to/custom-ruleset.jar\n# or\nktlint -R /path/to/custom-ruleset.jar\n</code></pre>"},{"location":"install/cli/#format-autocorrect","title":"Format (autocorrect)","text":"<p>Most style violations can be corrected automatically. Errors that can not be corrected, are printed to <code>stderr</code>.</p> Autocorrect style violations<pre><code>ktlint --format\n# or\nktlint -F\n</code></pre>"},{"location":"install/cli/#globs","title":"Globs","text":"<p>Globs can be used to specify more exactly what files and directories are to be validated. <code>ktlint</code> uses the <code>.gitignore</code> pattern style syntax for globs. Globs are processed from left to right. Prepend a glob with <code>!</code> to negate it. Hidden folders will be skipped.</p> Check only certain locations starting from the current directory<pre><code># Check all '.kt' files in 'src/' directory, but ignore files ending with 'Test.kt':\nktlint \"src/**/*.kt\" \"!src/**/*Test.kt\"\n# Check all '.kt' files in 'src/' directory, but ignore 'generated' directory and its subdirectories:\nktlint \"src/**/*.kt\" \"!src/**/generated/**\"\n</code></pre>"},{"location":"install/cli/#violation-reporting","title":"Violation reporting","text":"<p><code>ktlint</code> supports different type of reporters for lint violations. When not specified the <code>plain</code> reporter is used. Optionally the <code>plain</code> reporter can group the violations per file.</p> Style violation grouped by file<pre><code>$ ktlint --reporter=plain?group_by_file\n</code></pre> <p>When using <code>ktlint</code> on an existing project, the number of violations can be huge. To get more insights in which rules are causing the most violations, the <code>plain-summary</code> reporter can be used. Style violations counted per rule<pre><code>$ ktlint --reporter=plain-summary\n</code></pre></p> <p>Other built-in reporters are: <code>json</code>, <code>sarif</code>, <code>checkstyle</code>, and <code>html</code></p> <p>Style violations can be written to an output file which is convenient when multiple reporters are specified. In example below, the plain reporter is used to write to the console while the checkstyle reports is written to a file:</p> Multiple reporters<pre><code>ktlint --reporter=plain --reporter=checkstyle,output=ktlint-report-in-checkstyle-format.xml\n</code></pre> <p>If resolving all existing errors in a project is unwanted, it is possible to create a baseline and in following invocations compare violations against this baseline. Violations that are registered in the baseline, will be ignored silently. Remove the baseline file in case you want to reset it.</p> Check against a baseline file<pre><code>ktlint --baseline=ktlint-baseline.xml # Baseline is created when not existing\n</code></pre>"},{"location":"install/cli/#logging","title":"Logging","text":"<p>Logging information is written to <code>stdout</code>. The amount of logging can be influenced by setting the minimal log level using option <code>--log-level</code> or <code>-l</code> to one of values <code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>, or <code>none</code> to suppress all logging.</p> <p>By default, the <code>info</code> log level is used meaning that all log lines at level <code>info</code>, <code>warn</code> and <code>error</code> are shown while suppressing log lines at level <code>debug</code> or <code>trace</code>.</p>"},{"location":"install/cli/#rule-configuration-editorconfig","title":"Rule configuration (<code>.editorconfig</code>)","text":"<p>Some rules can be tweaked via the <code>editorconfig file</code>.</p> <p>A scaffold of the <code>.editorconfig file</code> can be generated with command below. Note: that the generated file only contains configuration settings which are actively used by the rules which are loaded:</p> Generate .editorconfig<pre><code>ktlint generateEditorConfig\n# or\nktlint --experimental generateEditorConfig\n# or\nktlint --experimental --ruleset=/path/to/custom-ruleset.jar generateEditorConfig\n</code></pre> <p>Normally this file is located in the root of your project directory. In case the file is located in a sub folder of the project, the settings of that file only applies to that subdirectory and its folders (recursively). Ktlint automatically detects and reads all <code>.editorconfig</code> files in your project.</p> <p>Use command below, to specify a default <code>editorconfig</code>. In case a property is not defined in any <code>.editorconfig</code> file on the path to the file, the value from the default file is used. The path may point to any valid file or directory. The path can be relative or absolute. Depending on your OS, the \"~\" at the beginning of a path is replaced by the user home directory.</p> Override '.editorconfig'<pre><code>ktlint --editorconfig=/path/to/.editorconfig\n</code></pre> <p>!!! warning \"Overrides '.editorconfig' in project directory\" in KtLint 0.46 and older     When specifying this option using ktlint 0.46 or older, all <code>.editorconfig</code> files in the project directory are being ignored. Starting from KtLint 0.47 the properties in this file are used as fallback.</p>"},{"location":"install/cli/#stdin-stdout","title":"Stdin &amp;&amp; stdout","text":"<p>With command below, the input is read from <code>stdin</code> and the violations are printed to <code>stderr</code>. Logging is written to <code>stdout</code>.</p> Lint from stdin<pre><code>ktlint --stdin\n</code></pre> <p>When combined with the <code>--format</code> option, the formatted code is written to <code>stdout</code> and the violations are printed to <code>stderr</code>:</p> Format from stdin and write to stdout<pre><code>ktlint --stdin -F\n</code></pre> <p>Tip</p> <p>Logging output printed to <code>stdout</code> can be suppressed by setting <code>--log-level=none</code> (see logging). Output printed to <code>stderr</code> can be suppressed in different ways. To ignore all error output, add <code>2&gt; /dev/null</code> to the end of the command line. Otherwise, specify a reporter to write the error output to a file.</p>"},{"location":"install/cli/#git-hooks","title":"Git hooks","text":"<p>Predefined git hooks can be installed, to automatically validate lint errors before commit or push.</p> Install git pre-commit hook<pre><code>ktlint installGitPreCommitHook\n</code></pre> Install git pre-push hook<pre><code>ktlint installGitPrePushHook\n</code></pre>"},{"location":"install/cli/#miscellaneous-flags-and-commands","title":"Miscellaneous flags and commands","text":"<p><code>-a</code> or <code>--android</code>: Turn on Android Kotlin Style Guide compatibility. This flag is most likely to be removed in a future version. Use <code>.editorconfig ktlint_code_style</code>. </p> <p><code>--color</code> and <code>--color-name=&lt;colorName&gt;</code>: Make output colorful and optionally set the color name to use.</p> <p><code>--disabled_rules=&lt;disabledRules&gt;</code>: A comma-separated list of rules to globally disable. To disable the standard ktlint rule-set use <code>--disabled_rules=standard</code>.  This flag is most likely to be removed in a future version. Use <code>.editorconfig disabled_rules</code>.</p> <p><code>-h</code> or <code>--help</code>: Prints help information.</p> <p><code>--limit=&lt;limit&gt;</code>: Maximum number of errors to show (default: show all)</p> <p><code>printAST</code> or <code>--print-ast</code>: Prints AST (useful when writing/debugging rules)</p> <p><code>--relative</code>: Print files relative to the working directory (e.g. dir/file.kt instead of /home/user/project/dir/file.kt)</p> <p><code>--patterns-from-stdin[=&lt;delimiter&gt;]</code>: Reads additional patterns from <code>stdin</code>, where the patterns are separated by <code>&lt;delimiter&gt;</code>. If <code>=&lt;delimiter&gt;</code> is omitted, newline is used as fallback delimiter. If an empty string is given, the <code>NUL</code> byte is used as delimiter instead. Options <code>--stdin</code> and <code>--patterns-from-stdin</code> are mutually exclusive, only one of them can be given at a time.</p> <p><code>-V</code> or <code>--version</code>: Prints version information and exit.</p>"},{"location":"install/cli/#microsoft-windows-users","title":"Microsoft Windows users","text":"<p>Microsoft Windows</p> <p>On Microsoft Windows you'll have to use <code>java -jar ktlint ...</code>.</p>"},{"location":"install/integrations/","title":"Integrations","text":""},{"location":"install/integrations/#maven-integration","title":"Maven integration","text":"<p>By adding the plugin definition below to the <code>&lt;plugins&gt;</code> section in the <code>pom.xml</code>:</p> <ul> <li>The <code>ktlint</code> task is bound to the Maven verify lifecycle and will be executed each time the <code>mvn verify</code> is executed. It can also be executed with command <code>mvn antrun:run@ktlint</code>.</li> <li>The <code>ktlint-format</code> task is not bound to any other maven lifecycle. It can be executed with command <code>mvn antrun:run@ktlint-format</code>.</li> </ul> <p>See cli usage for arguments that can be supplied to <code>ktlint</code>.</p> Adding plugin to pom.xml<pre><code>...\n&lt;plugin&gt;\n&lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n&lt;artifactId&gt;maven-antrun-plugin&lt;/artifactId&gt;\n&lt;version&gt;3.1.0&lt;/version&gt;\n&lt;executions&gt;\n&lt;execution&gt;\n&lt;id&gt;ktlint&lt;/id&gt;\n&lt;phase&gt;verify&lt;/phase&gt;\n&lt;configuration&gt;\n&lt;target name=\"ktlint\"&gt;\n&lt;java taskname=\"ktlint\" dir=\"${basedir}\" fork=\"true\" failonerror=\"true\"\nclasspathref=\"maven.plugin.classpath\" classname=\"com.pinterest.ktlint.Main\"&gt;\n&lt;arg value=\"src/**/*.kt\"/&gt;\n&lt;!-- see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information --&gt;\n&lt;/java&gt;\n&lt;/target&gt;\n&lt;/configuration&gt;\n&lt;goals&gt;\n&lt;goal&gt;run&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;/execution&gt;\n&lt;execution&gt;\n&lt;id&gt;ktlint-format&lt;/id&gt;\n&lt;configuration&gt;\n&lt;target name=\"ktlint\"&gt;\n&lt;java taskname=\"ktlint\" dir=\"${basedir}\" fork=\"true\" failonerror=\"true\"\nclasspathref=\"maven.plugin.classpath\" classname=\"com.pinterest.ktlint.Main\"&gt;\n&lt;arg value=\"-F\"/&gt;\n&lt;arg value=\"src/**/*.kt\"/&gt;\n&lt;!-- see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information --&gt;\n&lt;/java&gt;\n&lt;/target&gt;\n&lt;/configuration&gt;\n&lt;goals&gt;\n&lt;goal&gt;run&lt;/goal&gt;\n&lt;/goals&gt;\n&lt;/execution&gt;\n&lt;/executions&gt;\n&lt;dependencies&gt;\n&lt;dependency&gt;\n&lt;groupId&gt;com.pinterest&lt;/groupId&gt;\n&lt;artifactId&gt;ktlint&lt;/artifactId&gt;\n&lt;version&gt;0.48.2&lt;/version&gt;\n&lt;/dependency&gt;\n&lt;!-- additional 3rd party ruleset(s) can be specified here --&gt;\n&lt;/dependencies&gt;\n&lt;/plugin&gt;\n...\n</code></pre> <p>Tip</p> <p>If you want ktlint to run before code compilation takes place - change <code>&lt;phase&gt;verify&lt;/phase&gt;</code> to <code>&lt;phase&gt;validate&lt;/phase&gt;</code> (see Maven Build Lifecycle for more).</p> <p>ktlint-maven-plugin</p> <p>You might be interested to use the dedicated gantsign/ktlint-maven-plugin.</p>"},{"location":"install/integrations/#gradle-integration","title":"Gradle integration","text":""},{"location":"install/integrations/#jlleitschuhktlint-gradle","title":"jlleitschuh/ktlint-gradle","text":"<p>The jlleitschuh/ktlint-gradle Gradle plugin automatically creates check and format tasks for project Kotlin sources. It supports different kotlin plugins and Gradle build caching.</p>"},{"location":"install/integrations/#jeremymailenkotlinter-gradle","title":"jeremymailen/kotlinter-gradle","text":"<p>The jeremymailen/kotlinter-gradle Gradle plugin features incremental build support, file reports, and <code>*.kts</code> source support.</p>"},{"location":"install/integrations/#diffplugspotless","title":"diffplug/spotless","text":"<p>The diffplug/spotless Gradle plugin is a general-purpose formatting plugin which amongst many others also supports <code>ktlint</code>.</p>"},{"location":"install/integrations/#autostyleautostyle","title":"autostyle/autostyle","text":"<p>The autostyle/autostyle Gradle plugin is a general-purpose formatting plugin which amongst others also supports <code>ktlint</code>. </p>"},{"location":"install/integrations/#custom-gradle-integration","title":"Custom Gradle integration","text":""},{"location":"install/integrations/#custom-gradle-integration-with-groovy","title":"Custom Gradle integration with Groovy","text":"<p>Warning</p> <p>It is recommended to use one of the Gradle plugins mentioned before.</p> <p>The configuration below, defines following task:</p> <ul> <li>The <code>ktlint</code> is bound to the Gradle check task. It can also be executed with command <code>gradle ktlint</code>.</li> <li>The <code>ktlint-format</code> task is not bound to any other task. It can be executed with command <code>gradle ktlintFormat</code>.</li> </ul> build.gradle<pre><code>// kotlin-gradle-plugin must be applied for configuration below to work\n// (see https://kotlinlang.org/docs/reference/using-gradle.html)\napply plugin: 'java'\nrepositories {\nmavenCentral()\n}\nconfigurations {\nktlint\n}\ndependencies {\nktlint(\"com.pinterest:ktlint:0.48.2\") {\nattributes {\nattribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))\n}\n}\n// additional 3rd party ruleset(s) can be specified here\n// just add them to the classpath (e.g. ktlint 'groupId:artifactId:version') and \n// ktlint will pick them up\n}\ntask ktlint(type: JavaExec, group: \"verification\") {\ndescription = \"Check Kotlin code style.\"\nclasspath = configurations.ktlint\nmainClass.set(\"com.pinterest.ktlint.Main\")\nargs \"src/**/*.kt\"\n// see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information\n}\ncheck.dependsOn ktlint\ntask ktlintFormat(type: JavaExec, group: \"formatting\") {\ndescription = \"Fix Kotlin code style deviations.\"\nclasspath = configurations.ktlint\nmainClass.set(\"com.pinterest.ktlint.Main\")\nargs \"-F\", \"src/**/*.kt\"\n// see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information\n}\n</code></pre> <p>See Making your Gradle tasks incremental by Niklas Baudy on how to make tasks above incremental.</p>"},{"location":"install/integrations/#custom-gradle-integration-with-kotlin-dsl","title":"Custom Gradle integration with Kotlin DSL","text":"<p>Warning</p> <p>It is recommended to use one of the Gradle plugins mentioned before.</p> <p>The configuration below, defines following task:</p> <ul> <li>The <code>ktlint</code> is bound to the Gradle check task. It can also be executed with command <code>gradle ktlint</code>.</li> <li>The <code>ktlint-format</code> task is not bound to any other task. It can be executed with command <code>gradle ktlintFormat</code>.</li> </ul> build.gradle.kts<pre><code>val ktlint by configurations.creating\ndependencies {\nktlint(\"com.pinterest:ktlint:0.48.2\") {\nattributes {\nattribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling.EXTERNAL))\n}\n}\n// ktlint(project(\":custom-ktlint-ruleset\")) // in case of custom ruleset\n}\nval outputDir = \"${project.buildDir}/reports/ktlint/\"\nval inputFiles = project.fileTree(mapOf(\"dir\" to \"src\", \"include\" to \"**/*.kt\"))\nval ktlintCheck by tasks.creating(JavaExec::class) {\ninputs.files(inputFiles)\noutputs.dir(outputDir)\ndescription = \"Check Kotlin code style.\"\nclasspath = ktlint\nmainClass.set(\"com.pinterest.ktlint.Main\")\n// see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information\nargs = listOf(\"src/**/*.kt\")\n}\nval ktlintFormat by tasks.creating(JavaExec::class) {\ninputs.files(inputFiles)\noutputs.dir(outputDir)\ndescription = \"Fix Kotlin code style deviations.\"\nclasspath = ktlint\nmainClass.set(\"com.pinterest.ktlint.Main\")\n// see https://pinterest.github.io/ktlint/install/cli/#command-line-usage for more information\nargs = listOf(\"-F\", \"src/**/*.kt\")\n}\n</code></pre>"},{"location":"install/integrations/#gnu-emacs-integration","title":"GNU Emacs integration","text":"<p>See whirm/flycheck-kotlin.</p>"},{"location":"install/integrations/#vim-integration","title":"Vim integration","text":"<p>See w0rp/ale.</p>"},{"location":"install/integrations/#mega-linter-integration","title":"Mega-Linter integration","text":"<p>The Mega-Linter integrates 70+ linters in a single tool for CI, including ktlint activated out of the box</p>"},{"location":"install/integrations/#other-integration","title":"Other integration","text":"<p>Do you know any other integration with <code>ktlint</code> then please create a PR to add this integration to our documentation.</p>"},{"location":"install/overview/","title":"Overview","text":"<p>See command line interface or integrations for details on installing the latest release of <code>ktlint</code>.</p>"},{"location":"install/overview/#online-demo","title":"Online demo","text":"<p>See <code>ktlint</code> online if you want to try-out 'ktlint'. This online version compares rule sets provided by <code>ktlint</code> and <code>diktat</code> (a layer on top of <code>ktlint</code>). To contribute to or get more info about <code>ktlint</code> online, please visit the GitHub repository.</p>"},{"location":"install/snapshot-build/","title":"Snapshot build","text":""},{"location":"install/snapshot-build/#access-to-the-latest-master-snapshot","title":"Access to the latest <code>master</code> snapshot","text":"<p>Whenever a commit is added to the <code>master</code> branch a snapshot build is automatically uploaded to Sonatype's snapshots repository. If you are eager to try upcoming changes (that might or might not be included in the next stable release) you can do so by changing version of ktlint to <code>&lt;latest-version&gt;-SNAPSHOT</code> + adding a repo:</p>"},{"location":"install/snapshot-build/#maven","title":"Maven","text":"<pre><code>...\n&lt;repository&gt;\n&lt;id&gt;sonatype-snapshots&lt;/id&gt;\n&lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;\n&lt;snapshots&gt;\n&lt;enabled&gt;true&lt;/enabled&gt;\n&lt;/snapshots&gt;\n&lt;releases&gt;\n&lt;enabled&gt;false&lt;/enabled&gt;\n&lt;/releases&gt;\n&lt;/repository&gt;\n...\n</code></pre>"},{"location":"install/snapshot-build/#gradle","title":"Gradle","text":"<pre><code>repositories {\nmaven {\nurl \"https://oss.sonatype.org/content/repositories/snapshots\"\n}\n}\n</code></pre>"},{"location":"install/snapshot-build/#kotlin-development-version-snapshot","title":"Kotlin development version snapshot","text":"<p>Additionally, project publishes snapshots build against latest kotlin development version. To use them, change version of ktlint to <code>&lt;latest-version&gt;-kotlin-dev-SNAPSHOT</code>.</p>"},{"location":"rules/","title":"Index","text":"<p>= Rules</p>"},{"location":"rules/configuration-intellij-idea/","title":"IntelliJ IDEA configuration","text":"<p>Warning</p> <p><code>ktlint</code> strives to prevent code formatting conflicts with IntelliJ IDEA / Android Studio. We recommend using either IDE formatting or <code>ktlint</code> formatting. However, if you persist on using both, then please ensure that the formatting settings are aligned as described below.  This reduces the chance that code which is formatted by ktlint conflicts with formatting by the IntelliJ IDEA built-in formatter.</p> <p>Note</p> <p>IntelliJ IDEA supports the kotlin coding conventions. As of version 0.47.x of ktlint, the support to overwrite some configuration files of IntelliJ IDEA has been dropped as it no longer fits the scope of the project. </p> <p>Steps:</p> <ol> <li>Go to your project directory</li> <li>Create or replace file <code>.idea/codeStyles/codeStyleConfig.xml</code> with content below:    <pre><code>&lt;component name=\"ProjectCodeStyleConfiguration\"&gt;\n&lt;state&gt;\n&lt;option name=\"USE_PER_PROJECT_SETTINGS\" value=\"true\" /&gt;\n&lt;/state&gt;\n&lt;/component&gt;\n</code></pre></li> <li>Create or replace file <code>.idea/codeStyles/Project.xml</code> with content below:    <pre><code>&lt;component name=\"ProjectCodeStyleConfiguration\"&gt;\n&lt;code_scheme name=\"Project\" version=\"173\"&gt;\n&lt;JetCodeStyleSettings&gt;\n&lt;option name=\"PACKAGES_TO_USE_STAR_IMPORTS\"&gt;\n&lt;value /&gt;\n&lt;/option&gt;\n&lt;option name=\"NAME_COUNT_TO_USE_STAR_IMPORT\" value=\"2147483647\" /&gt;\n&lt;option name=\"NAME_COUNT_TO_USE_STAR_IMPORT_FOR_MEMBERS\" value=\"2147483647\" /&gt;\n&lt;option name=\"CODE_STYLE_DEFAULTS\" value=\"KOTLIN_OFFICIAL\" /&gt;\n&lt;/JetCodeStyleSettings&gt;\n&lt;codeStyleSettings language=\"kotlin\"&gt;\n&lt;option name=\"CODE_STYLE_DEFAULTS\" value=\"KOTLIN_OFFICIAL\" /&gt;\n&lt;/codeStyleSettings&gt;\n&lt;/code_scheme&gt;\n&lt;/component&gt;\n</code></pre></li> </ol>"},{"location":"rules/configuration-ktlint/","title":"KtLint configuration","text":"<p>Ktlint uses a limited set of <code>.editorconfig</code> properties for additional configuration. A sensible default value is provided for each property when not explicitly defined. Properties can be overridden, provided they are specified under <code>[*.{kt,kts}]</code>. Ktlint uses some properties defined by .editorconfig, IntelliJ IDEA and custom properties.</p> <p>Danger</p> <p>Unfortunately IntelliJ IDEA has an autoformat issue regarding <code>.editorconfig</code>. Due to this error an additional space is added between glob statements, resulting in <code>[*{kt, kts}]</code> instead of <code>[*{kt,kts}]</code>. The <code>.editorconfig</code> library used by <code>ktlint</code> ignores sections after encountering a space in the list. As a result, the rule is not applied on all files as documented in the original ktlint issue.</p>"},{"location":"rules/configuration-ktlint/#code-style","title":"Code style","text":"<p>By default, the <code>offical</code> Kotlin code style is applied. Alternatively, the code style can be set to <code>android</code>.</p> <pre><code>[*.{kt,kts}]\nktlint_code_style = official\n</code></pre>"},{"location":"rules/configuration-ktlint/#disabled-rules","title":"Disabled rules","text":"<p>Warning</p> <p>Properties <code>disabled_rules</code> and <code>ktlint_disabled_rules</code> are deprecated in KtLint <code>0.48</code> and are marked for removal in KtLint <code>0.49</code>.</p> <p>By default, no rules are disabled. The properties <code>disabled_rules</code> and <code>ktlint_disabled_rules</code> hold a comma separated list (without spaces). Rules which are not defined in the <code>standard</code> ruleset have to be prefixed. Rules defined in the <code>standard</code> ruleset may optionally be prefixed.</p> <p>Example: <pre><code>[*.{kt,kts}]\ndisabled_rules = some-standard-rule,experimental:some-experimental-rule,my-custom-ruleset:my-custom-rule\n</code></pre></p> <p>Starting with KtLint <code>0.48</code> entire rule sets and individual rules can be disabled / enabled with a separate property per rule (set).</p> <p>All rules in a rule set can be enabled or disabled with a rule set property. The name of the rule set property consists of the <code>ktlint_</code> prefix followed by the rule set id. Examples: <pre><code>ktlint_standard = disabled # Disable all rules from the `standard` rule set provided by KtLint\nktlint_experimental = enabled # Enable all rules from the `experimental` rule set provided by KtLint\nktlint_your-custom-rule-set_custom-rule = enabled # Enable all rules in the `custom-rule-set` rule set (not provided by KtLint)\n</code></pre></p> <p>Note</p> <p>Rules from the <code>experimental</code> rule set are disabled by default. Either the entire rule set or individual rules from this rule set have to be enabled explicitly. All rules from the <code>standard</code> and custom rule sets are enabled by default and can optionally be disabled in the <code>.editorconfig</code>.</p> <p>An individual property can be enabled or disabled with a rule property. The name of the rule property consists of the <code>ktlint_</code> prefix followed by the rule set id followed by a <code>_</code> and the rule id. Examples: <pre><code>ktlint_standard_final-newline = disabled # Disables the `final-newline` rule in the `standard` rule set provided by KtLint\nktlint_experimental_type-argument-list-spacing = enabled # Enables the `type-argument-list-spacing` rule in the `experimental` rule set provided by KtLint\nktlint_custom-rule-set_custom-rule = disabled # Disables the `custom-rule` rule in the `custom-rule-set` rule set (not provided by KtLint)\n</code></pre></p> <p>Note</p> <p>The rule properties are applied after applying the rule set properties and take precedence. So if a rule set is disabled but a specific rule of that rule set is enabled, then the rule will be executed.</p>"},{"location":"rules/configuration-ktlint/#final-newline","title":"Final newline","text":"<p>By default, a final newline is required at the end of the file.</p> <pre><code>[*.{kt,kts}]\ninsert_final_newline = true\n</code></pre> <p>This setting only takes effect when rule <code>final-newline</code> is enabled.</p>"},{"location":"rules/configuration-ktlint/#force-multiline-function-signature-based-on-number-of-parameters","title":"Force multiline function signature based on number of parameters","text":"<p>By default, the number of parameters in a function signature is not relevant when rewriting the function signature. Only the maximum line length determines when a function signature should be written on a single line or with multiple lines. Setting <code>ktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than</code> can be used, to force a multiline function signature in case the function contain at least a number of parameters even in case the function signature would fit on a single line. Use value <code>-1</code> (default) to disable this setting.</p> <pre><code>[*.{kt,kts}]\nktlint_function_signature_rule_force_multiline_when_parameter_count_greater_or_equal_than= -1\n</code></pre> <p>This setting only takes effect when rule <code>experimental:function-signature</code> is enabled.</p>"},{"location":"rules/configuration-ktlint/#wrapping-the-expression-body-of-a-function","title":"Wrapping the expression body of a function","text":"<p>Setting <code>ktlint_function_signature_body_expression_wrapping</code> determines if and when the expression body of a function is wrapped to a new line. This setting can be set to value <code>default</code>, <code>multiline</code> or <code>always</code>. </p> <p>When set to <code>default</code>, the first line of a body expression is appended to the function signature as long as the max line length is not exceeded.</p> ktlint_function_signature_body_expression_wrapping=default (or when not set)<pre><code>// Given that the function signature has to be written as a single line function signature\nfun someFunction(a: Any, b: Any): String = \"some-result\"\n.uppercase()\n// Given that the function signature has to be written as a multiline function signature\nfun someFunction(\na: Any,\nb: Any\n): String = \"some-result\"\n.uppercase()\n</code></pre> <p>When set to <code>multiline</code>, the body expression starts on a separate line in case it is a multiline expression. A single line body expression is wrapped only when it does not fit on the same line as the function signature.</p> ktlint_function_signature_body_expression_wrapping=multiline<pre><code>// Given a single line body expression and\n// a the function signature that has to be written as a single line function signature and\n// it does not exceed the max line length\nfun someFunction(a: Any, b: Any): String = \"some-result\".uppercase()\n// Given a single line body expression and\n// a the function signature that has to be written as a multiline function signature and\n// it does not exceed the max line length\nfun someFunction(\na: Any,\nb: Any\n): String = \"some-result\".uppercase()\n// Given a single line body expression then always wrap it to a separate line\nfun someFunction(a: Any, b: Any): String =\n\"some-result\"\n.uppercase()\nfun someFunction(\na: Any,\nb: Any\n): String =\n\"some-result\"\n.uppercase()\n</code></pre> <p>When set to <code>always</code> the body expression is always wrapped to a separate line.</p> ktlint_function_signature_body_expression_wrapping=always<pre><code>fun someFunction(a: Any, b: Any): String =\n\"some-result\".uppercase()\nfun functionWithAVeryLongName(\na: Any,\nb: Any\n): String =\n\"some-result\"\n.uppercase()\n</code></pre> <p>This setting only takes effect when rule <code>experimental:function-signature</code> is enabled.</p>"},{"location":"rules/configuration-ktlint/#ignore-identifiers-enclosed-in-backticks","title":"Ignore identifiers enclosed in backticks","text":"<p>By default, the identifiers enclosed in backticks are not ignored.</p> <p>According to Kotlin coding conventions it is acceptable to write method names in natural language. When using natural language, the description tends to be longer. This property allows lines containing an identifier between backticks to be longer than the maximum line length. (Since 0.41.0)</p> <pre><code>@Test\nfun `Given a test with a very loooooooooooooooooooooong test description`() {\n}\n</code></pre> <pre><code>[*.{kt,kts}]\nktlint_ignore_back_ticked_identifier = false\n</code></pre> <p>This setting only takes effect when rule <code>max-line-length</code> is enabled.</p>"},{"location":"rules/configuration-ktlint/#import-layouts","title":"Import layouts","text":"<p>By default, the same imports are allowed as in IntelliJ IDEA. The import path can be a full path, e.g. \"java.util.List.\" as well as wildcard path, e.g. \"kotlin.*\".</p> <p>The layout can be composed by the following symbols:</p> <ul> <li><code>*</code> - wildcard. There must be at least one entry of a single wildcard to match all other imports. Matches anything after a specified symbol/import as well.</li> <li><code>|</code> - blank line. Supports only single blank lines between imports. No blank line is allowed in the beginning or end of the layout.</li> <li><code>^</code> - alias import, e.g. \"^android.*\" will match all android alias imports, \"^\" will match all other alias imports.</li> </ul> <p>Examples: <pre><code>ij_kotlin_imports_layout=* # alphabetical with capital letters before lower case letters (e.g. Z before a), no blank lines\nij_kotlin_imports_layout=*,java.**,javax.**,kotlin.**,^ # default IntelliJ IDEA style, same as alphabetical, but with \"java\", \"javax\", \"kotlin\" and alias imports in the end of the imports list\nij_kotlin_imports_layout=android.**,|,^org.junit.**,kotlin.io.Closeable.*,|,*,^ # custom imports layout\n</code></pre></p> <p>Wildcard imports can be allowed for specific import paths (Comma-separated list, use \"**\" as wildcard for package and all subpackages). This setting overrides the no-wildcard-imports rule. This setting is best be used for allowing wildcard imports from libraries like Ktor where extension functions are used in a way that creates a lot of imports.</p> <pre><code>[*.{kt,kts}]\nij_kotlin_packages_to_use_import_on_demand = java.util.*,kotlinx.android.synthetic.**\n</code></pre> <p>This setting only takes effect when rule <code>no-wildcard-imports</code> is enabled.</p>"},{"location":"rules/configuration-ktlint/#indent-size-style","title":"Indent size &amp; style","text":"<p>By default, indenting is done with 4 spaces per indent level in <code>official</code> Kotlin code style while a single tab is used by default in the <code>android</code> code style.</p> <pre><code>[*.{kt,kts}]\nindent_size = 4 # possible values: number (e.g. 2), \"unset\" (makes ktlint ignore indentation completely)  \nindent_style = space # or \"tab\"\n</code></pre> <p>Those settings are used by multiple rules of which rule <code>indent</code> is the most important.</p>"},{"location":"rules/configuration-ktlint/#max-line-length","title":"Max line length","text":"<p>By default, the maximum line length is not set. The <code>android</code> code style sets the max line length to 100 (per Android Kotlin Style Guide).</p> <pre><code>[*.{kt,kts}]\nmax_line_length = -1 # Use \"off\" (or -1) to ignore max line length or a positive number to set max line length\n</code></pre> <p>This setting is used by multiple rules of which rule <code>max-line-length</code> is the most important.</p>"},{"location":"rules/configuration-ktlint/#trailing-comma-on-call-site","title":"Trailing comma on call site","text":"<p>By default, trailing comma's on call site are not allowed. When enabling the property, the trailing comma becomes mandatory where applicable.</p> <p>Example: <pre><code>[*.{kt,kts}]\nij_kotlin_allow_trailing_comma_on_call_site = false\n</code></pre></p> <p>This setting only takes effect when rule <code>trailing-comma-on-call-site</code> is enabled.</p>"},{"location":"rules/configuration-ktlint/#trailing-comma-on-declaration-site","title":"Trailing comma on declaration site","text":"<p>By default, trailing comma's on declaration site are not allowed. When enabling the property, the trailing comma becomes mandatory where applicable.</p> <p>Example: <pre><code>[*.{kt,kts}]\nij_kotlin_allow_trailing_comma = false # Only used for declaration site \n</code></pre></p> <p>This setting only takes effect when rule <code>trailing-comma-on-declaration-site</code> is enabled.</p>"},{"location":"rules/configuration-ktlint/#overriding-editorconfig-properties-for-specific-directories","title":"Overriding Editorconfig properties for specific directories","text":"<p>You can override properties for specific directories inside your project: <pre><code>[*.{kt,kts}]\nktlint_standard_import-ordering = disabled\n[api/*.{kt,kts}]\nktlint_standard_indent = disabled\n</code></pre></p> <p>Note that the <code>import-ordering</code> rule is disabled for all packages including the <code>api</code> sub package. Next to this the <code>indent</code> rule is disabled for the <code>api</code> package and its sub packages.</p>"},{"location":"rules/dependencies/","title":"Dependencies","text":"<p>Preferably rules run independent of each other. In some case this is however not feasible. The diagram below shows the dependencies between the rules (both standard and experimental) provided by KtLint.</p> <p></p>"},{"location":"rules/experimental/","title":"Experimental rules","text":"<p>New rules will be added into the experimental ruleset, which can be enabled by passing the <code>--experimental</code> flag to <code>ktlint</code>.</p>"},{"location":"rules/experimental/#block-comment-initial-star-alignment","title":"Block comment initial star alignment","text":"<p>Lines in a block comment which (exclusive the indentation) start with a <code>*</code> should have this <code>*</code> aligned with the <code>*</code> in the opening of the block comment.</p> <p>Rule id: <code>experimental:block-comment-initial-star-alignment</code></p>"},{"location":"rules/experimental/#discouraged-comment-location","title":"Discouraged comment location","text":"<p>Detect discouraged comment locations (no autocorrect).</p> <p>Rule id: <code>experimental:discouraged-comment-location</code></p>"},{"location":"rules/experimental/#unnecessary-parenthesis-before-trailing-lambda","title":"Unnecessary parenthesis before trailing lambda","text":"<p>An empty parentheses block before a lambda is redundant.</p>  Ktlint Disallowed <pre><code>\"some-string\".count { it == '-' }\n</code></pre> <pre><code>\"some-string\".count() { it == '-' }\n</code></pre> <p>Rule id: <code>experimental:unnecessary-parentheses-before-trailing-lambda</code></p>"},{"location":"rules/experimental/#function-signature","title":"Function signature","text":"<p>Rewrites the function signature to a single line when possible (e.g. when not exceeding the <code>max_line_length</code> property) or a multiline signature otherwise. In case of function with a body expression, the body expression is placed on the same line as the function signature when not exceeding the <code>max_line_length</code> property. Optionally the function signature can be forced to be written as a multiline signature in case the function has more than a specified number of parameters (<code>.editorconfig' property</code>ktlint_function_signature_wrapping_rule_always_with_minimum_parameters`)</p> <p>Rule id: <code>function-signature</code></p>"},{"location":"rules/experimental/#naming","title":"Naming","text":""},{"location":"rules/experimental/#classobject-naming","title":"Class/object naming","text":"<p>Enforce naming of class.</p> <p>Note</p> <p>Functions in files which import a class from package <code>org.junit.jupiter.api</code> are considered to be test functions and are allowed to have a name specified between backticks and do not need to adhere to the normal naming convention. Although, the Kotlin coding conventions does not allow this explicitly for class identifiers, <code>ktlint</code> does allow it as this makes it possible to write code like below:  <pre><code>@Nested\ninner class `Some descriptive class name` {\n@Test\nfun `Some descriptive test name`() {\n// do something\n}\n}\n</code></pre></p> <p>This rule can also be suppressed with the IntelliJ IDEA inspection suppression <code>ClassName</code>.</p> <p>Rule id: <code>experimental:class-naming</code></p>"},{"location":"rules/experimental/#function-naming","title":"Function naming","text":"<p>Enforce naming of function. </p> <p>Note</p> <p>Functions in files which import a class from package <code>org.junit</code>, <code>org.testng</code> or <code>kotlin.test</code> are considered to be test functions. Functions in such classes are allowed to have underscores in the name. Or function names can be specified between backticks and do not need to adhere to the normal naming convention.</p> <p>This rule can also be suppressed with the IntelliJ IDEA inspection suppression <code>FunctionName</code>.</p> <p>Rule id: <code>experimental:function-naming</code></p>"},{"location":"rules/experimental/#package-naming","title":"Package naming","text":"<p>Enforce naming of package.</p> <p>This rule can also be suppressed with the IntelliJ IDEA inspection suppression <code>PackageName</code>.</p> <p>Rule id: <code>experimental:package-naming</code></p>"},{"location":"rules/experimental/#property-naming","title":"Property naming","text":"<p>Enforce naming of property.</p> <p>This rule can also be suppressed with the IntelliJ IDEA inspection suppression <code>PropertyName</code>.</p> <p>Rule id: <code>experimental:property-naming</code></p>"},{"location":"rules/experimental/#spacing","title":"Spacing","text":""},{"location":"rules/experimental/#fun-keyword-spacing","title":"Fun keyword spacing","text":"<p>Consistent spacing after the fun keyword.</p> <p>Rule id: <code>experimental:fun-keyword-spacing</code></p>"},{"location":"rules/experimental/#function-return-type-spacing","title":"Function return type spacing","text":"<p>Consistent spacing around the function return type.</p> <p>Rule id: <code>experimental:function-return-type-spacing</code></p>"},{"location":"rules/experimental/#function-start-of-body-spacing","title":"Function start of body spacing","text":"<p>Consistent spacing before start of function body.</p> <p>Rule id: <code>experimental:function-start-of-body-spacing</code>:</p>"},{"location":"rules/experimental/#function-type-reference-spacing","title":"Function type reference spacing","text":"<p>Consistent spacing in the type reference before a function.</p> <p>Rule id: <code>experimental:function-type-reference-spacing</code></p>"},{"location":"rules/experimental/#modifier-list-spacing","title":"Modifier list spacing","text":"<p>Consistent spacing between modifiers in and after the last modifier in a modifier list.</p> <p>Rule id: <code>experimental:modifier-list-spacing</code></p>"},{"location":"rules/experimental/#nullable-type-spacing","title":"Nullable type spacing","text":"<p>No spaces in a nullable type.</p> <p>Rule id: <code>experimental:nullable-type-spacing</code></p>"},{"location":"rules/experimental/#parameter-list-spacing","title":"Parameter list spacing","text":"<p>Consistent spacing inside the parameter list.</p> <p>Rule id: <code>experimental:parameter-list-spacing</code></p>"},{"location":"rules/experimental/#spacing-between-function-name-and-opening-parenthesis","title":"Spacing between function name and opening parenthesis","text":"<p>Consistent spacing between function name and opening parenthesis.</p> <p>Rule id: <code>experimental:spacing-between-function-name-and-opening-parenthesis</code></p>"},{"location":"rules/experimental/#type-argument-list-spacing","title":"Type argument list spacing","text":"<p>Spacing before and after the angle brackets of a type argument list.</p> <p>Rule id: <code>experimental:type-argument-list-spacing</code></p>"},{"location":"rules/experimental/#type-parameter-list-spacing","title":"Type parameter list spacing","text":"<p>Spacing after a type parameter list in function and class declarations.</p> <p>Rule id: <code>experimental:type-parameter-list-spacing</code></p>"},{"location":"rules/experimental/#wrapping","title":"Wrapping","text":""},{"location":"rules/experimental/#comment-wrapping","title":"Comment wrapping","text":"<p>A block comment should start and end on a line that does not contain any other element. A block comment should not be used as end of line comment.</p> <p>Rule id: <code>experimental:comment-wrapping</code></p>"},{"location":"rules/experimental/#content-receiver-wrapping","title":"Content receiver wrapping","text":"<p>Wraps the content receiver list to a separate line regardless of maximum line length. If the maximum line length is configured and is exceeded, wrap the context receivers and if needed its projection types to separate lines.</p>  Ktlint Disallowed <pre><code>// ALways wrap regardless of whether max line length is set\ncontext(Foo)\nfun fooBar()\n// Wrap each context receiver to a separate line when the\n// entire context receiver list does not fit on a single line\ncontext(\nFooooooooooooooooooo1,\nFoooooooooooooooooooooooooooooo2\n)\nfun fooBar()\n// Wrap each context receiver to a separate line when the\n// entire context receiver list does not fit on a single line.\n// Also, wrap each of it projection types in case a context\n// receiver does not fit on a single line after it has been\n// wrapped.\ncontext(\nFoooooooooooooooo&lt;\nFoo,\nBar\n&gt;\n)\nfun fooBar()\n</code></pre> <pre><code>// Should be wrapped regardless of whether max line length is set\ncontext(Foo) fun fooBar()\n// Should be wrapped when the entire context receiver list does not\n// fit on a single line\ncontext(Fooooooooooooooooooo1, Foooooooooooooooooooooooooooooo2)\nfun fooBar()\n// Should be wrapped when the entire context receiver list does not\n// fit on a single line. Also, it should wrap each of it projection\n// type in case a context receiver does not fit on a single line \n// after it has been wrapped.\ncontext(Foooooooooooooooo&lt;Foo, Bar&gt;)\nfun fooBar()\n</code></pre> <p>Rule id: <code>experimental:context-receiver-wrapping</code></p>"},{"location":"rules/experimental/#kdoc-wrapping","title":"Kdoc wrapping","text":"<p>A KDoc comment should start and end on a line that does not contain any other element.</p> <p>Rule id: <code>experimental:kdoc-wrapping</code></p>"},{"location":"rules/standard/","title":"Standard rules","text":""},{"location":"rules/standard/#annotation-formatting","title":"Annotation formatting","text":"<p>Multiple annotations should be on a separate line than the annotated declaration; annotations with parameters should each be on separate lines; annotations should be followed by a space</p> <p>Rule-id: <code>annotation</code></p>"},{"location":"rules/standard/#argument-list-wrapping","title":"Argument list wrapping","text":"<p>Rule-id: <code>argument-list-wrapping</code></p>"},{"location":"rules/standard/#chain-wrapping","title":"Chain wrapping","text":"<p>When wrapping chained calls <code>.</code>, <code>?.</code> and <code>?:</code> should be placed on the next line</p> <p>Rule id: <code>chain-wrapping</code></p>"},{"location":"rules/standard/#enum-entry","title":"Enum entry","text":"<p>Enum entry names should be uppercase underscore-separated names.</p> <p>Rule id: <code>enum-entry-name-case</code></p>"},{"location":"rules/standard/#file-name","title":"File name","text":"<p>Files containing only one toplevel domain should be named according to that element.</p> <p>Rule id: <code>filename</code></p>"},{"location":"rules/standard/#final-newline","title":"Final newline","text":"<p>Ensures consistent usage of a newline at the end of each file. </p> <p>This rule can be configured with <code>.editorconfig</code> property <code>insert_final_newline</code>.</p> <p>Rule id: <code>final-newline</code></p>"},{"location":"rules/standard/#import-ordering","title":"Import ordering","text":"<p>Imports ordered consistently (see Custom ktlint EditorConfig properties for more)</p> <p>Rule id: <code>import-ordering</code></p>"},{"location":"rules/standard/#indentation","title":"Indentation","text":"<p>Indentation formatting - respects <code>.editorconfig</code> <code>indent_size</code> with no continuation indent (see EditorConfig section for more).</p> <p>Rule id: <code>indent</code></p>"},{"location":"rules/standard/#max-line-length","title":"Max line length","text":"<p>Ensures that lines do not exceed the given length of <code>.editorconfig</code> property <code>max_line_length</code> (see EditorConfig section for more). This rule does not apply in a number of situations. For example, in the case a line exceeds the maximum line length due to and comment that disables ktlint rules than that comment is being ignored when validating the length of the line. The <code>.editorconfig</code> property <code>ktlint_ignore_back_ticked_identifier</code> can be set to ignore identifiers which are enclosed in backticks, which for example is very useful when you want to allow longer names for unit tests.</p> <p>Rule id: <code>max-line-length</code></p>"},{"location":"rules/standard/#modifier-order","title":"Modifier order","text":"<p>Consistent order of modifiers</p> <p>Rule id: <code>modifier-order</code></p>"},{"location":"rules/standard/#multiline-if-else","title":"Multiline if-else","text":"<p>Braces required for multiline if/else statements.</p> <p>Rule id: <code>multiline-if-else</code></p>"},{"location":"rules/standard/#no-blank-lines-before","title":"No blank lines before <code>}</code>","text":"<p>No blank lines before <code>}</code>.</p> <p>Rule id: <code>no-blank-line-before-rbrace</code></p>"},{"location":"rules/standard/#no-blank-lines-in-chained-method-calls","title":"No blank lines in chained method calls","text":"<p>Rule id: <code>no-blank-lines-in-chained-method-calls</code></p>"},{"location":"rules/standard/#no-consecutive-blank-lines","title":"No consecutive blank lines","text":"<p>Rule id: <code>no-consecutive-blank-lines</code></p>"},{"location":"rules/standard/#no-empty-class-bodies","title":"No empty (<code>{}</code>) class bodies","text":"<p>Rule id: <code>no-empty-class-body</code></p>"},{"location":"rules/standard/#no-leading-empty-lines-in-method-blocks","title":"No leading empty lines in method blocks","text":"<p>Rule id: <code>no-empty-first-line-in-method-block</code></p>"},{"location":"rules/standard/#no-line-break-after-else","title":"No line break after else","text":"<p>Disallows line breaks after the else keyword if that could lead to confusion, for example: <pre><code>if (conditionA()) {\ndoSomething()\n} else\nif (conditionB()) {\ndoAnotherThing()\n}\n</code></pre></p> <p>Rule id: <code>no-line-break-after-else</code></p>"},{"location":"rules/standard/#no-line-break-before-assignment","title":"No line break before assignment","text":"<p>When a line is broken at an assignment (<code>=</code>) operator the break comes after the symbol.</p> <p>Rule id: <code>no-line-break-before-assignment</code></p>"},{"location":"rules/standard/#no-multi-spaces","title":"No multi spaces","text":"<p>Except in indentation and in KDoc's it is not allowed to have multiple consecutive spaces.</p> <p>Rule id: <code>no-multi-spaces</code></p>"},{"location":"rules/standard/#no-semicolons","title":"No semicolons","text":"<p>No semicolons (unless used to separate multiple statements on the same line).</p> <p>Rule id: <code>no-semi</code></p>"},{"location":"rules/standard/#no-trailing-whitespaces","title":"No trailing whitespaces","text":"<p>Rule id: <code>no-trailing-spaces</code></p>"},{"location":"rules/standard/#no-unit-as-return-type","title":"No <code>Unit</code> as return type","text":"<p>The <code>Unit</code> type is not allowed as return type of a function. returns (<code>fun fn {}</code> instead of <code>fun fn: Unit {}</code>)</p>  Ktlint Disallowed <pre><code>fun fn() {}\n</code></pre> <pre><code>fun fn(): Unit {}\n</code></pre> <p>Rule id: <code>no-unit-return</code></p>"},{"location":"rules/standard/#no-unused-imports","title":"No unused imports","text":"<p>Rule id: <code>no-unused-imports</code></p>"},{"location":"rules/standard/#no-wildcard-imports","title":"No wildcard imports","text":"<p>No wildcard imports except imports listed in <code>.editorconfig</code> property <code>ij_kotlin_packages_to_use_import_on_demand</code>.</p> <p>Rule id: <code>no-wildcard-imports</code></p>"},{"location":"rules/standard/#package-name","title":"Package name","text":"<p>Validates that the package name matches the regular expression <code>[a-z][a-zA-Z\\d]*(\\.[a-z][a-zA-Z\\d]*)*</code>.</p> <p>Rule id: <code>package-name</code></p>"},{"location":"rules/standard/#parameter-list-wrapping","title":"Parameter list wrapping","text":"<p>When class/function signature doesn't fit on a single line, each parameter must be on a separate line</p> <p>Rule id: <code>parameter-list-wrapping</code></p>"},{"location":"rules/standard/#string-template","title":"String template","text":"<p>Consistent string templates (<code>$v</code> instead of <code>${v}</code>, <code>${p.v}</code> instead of <code>${p.v.toString()}</code>)</p> <p>Rule id: <code>string-template</code></p>"},{"location":"rules/standard/#trailing-comma-on-call-site","title":"Trailing comma on call site","text":"<p>Consistent removal (default) or adding of trailing comma's on call site.</p> <p>Important</p> <p>KtLint uses the IntelliJ IDEA <code>.editorconfig</code> property <code>ij_kotlin_allow_trailing_comma_on_call_site</code> to configure the rule. When this property is enabled, KtLint enforces the usage of the trailing comma at call site while IntelliJ IDEA default formatter only allows to use the trailing comma but leaves it to the developer's discretion to actually use it (or not). KtLint values consistent formatting more than a per-situation decision.</p> <p>Note</p> <p>In KtLint 0.48.x the default value for using the trailing comma on call site has been changed to <code>true</code> except when codestyle <code>android</code> is used.</p> <p>Although the Kotlin coding conventions](https://kotlinlang.org/docs/reference/coding-conventions.html#names-for-test-methods) leaves it to the developer's discretion to use trailing comma's on the call site, it also states that usage of trailing commas has several benefits:</p> <ul> <li>It makes version-control diffs cleaner \u2013 as all the focus is on the changed value.</li> <li>It makes it easy to add and reorder elements \u2013 there is no need to add or delete the comma if you manipulate elements.</li> <li>It simplifies code generation, for example, for object initializers. The last element can also have a comma.</li> </ul> <p>Rule id: <code>trailing-comma-on-call-site</code></p>"},{"location":"rules/standard/#trailing-comma-on-declaration-site","title":"Trailing comma on declaration site","text":"<p>Consistent removal (default) or adding of trailing comma's on declaration site.</p> <p>Important</p> <p>KtLint uses the IntelliJ IDEA <code>.editorconfig</code> property <code>ij_kotlin_allow_trailing_comma</code> to configure the rule. When this property is enabled, KtLint enforces the usage of the trailing comma at declaration site while IntelliJ IDEA default formatter only allows to use the trailing comma but leaves it to the developer's discretion to actually use it (or not). KtLint values consistent formatting more than a per-situation decision.</p> <p>Note</p> <p>In KtLint 0.48.x the default value for using the trailing comma on declaration site has been changed to <code>true</code> except when codestyle <code>android</code> is used.</p> <pre><code>The Kotlin coding conventions](https://kotlinlang.org/docs/reference/coding-conventions.html#names-for-test-methods) encourages the usage of trailing comma's on the declaration site, but leaves it to the developer's discretion to use trailing comma's on the call site. But next to this, it also states that usage of trailing commas has several benefits:\n\n * It makes version-control diffs cleaner \u2013 as all the focus is on the changed value.\n * It makes it easy to add and reorder elements \u2013 there is no need to add or delete the comma if you manipulate elements.\n * It simplifies code generation, for example, for object initializers. The last element can also have a comma.\n</code></pre> <p>Rule id: <code>trailing-comma-on-declaration-site</code></p>"},{"location":"rules/standard/#wrapping","title":"Wrapping","text":"<p>Inserts missing newlines (for example between parentheses of a multi-line function call).</p> <p>Rule id: <code>wrapping</code></p>"},{"location":"rules/standard/#spacing","title":"Spacing","text":""},{"location":"rules/standard/#annotation-spacing","title":"Annotation spacing","text":"<p>Annotations should be separated by a single line break.</p> <p>Rule id: <code>annotation-spacing</code></p>"},{"location":"rules/standard/#colon-spacing","title":"Colon spacing","text":"<p>Consistent spacing around colon.</p> <p>Rule id: <code>colon-spacing</code></p>"},{"location":"rules/standard/#comma-spacing","title":"Comma spacing","text":"<p>Consistent spacing around comma.</p> <p>Rule id: <code>comma-spacing</code></p>"},{"location":"rules/standard/#comment-spacing","title":"Comment spacing","text":"<p>The end of line comment sign <code>//</code> should be preceded and followed by exactly a space.</p> <p>Rule id: <code>comment-spacing</code></p>"},{"location":"rules/standard/#curly-spacing","title":"Curly spacing","text":"<p>Consistent spacing around curly braces.</p> <p>Rule id: <code>curly-spacing</code></p>"},{"location":"rules/standard/#dot-spacing","title":"Dot spacing","text":"<p>Consistent spacing around dots.</p> <p>Rule id: <code>dot-spacing</code></p>"},{"location":"rules/standard/#double-colon-spacing","title":"Double colon spacing","text":"<p>No spaces around <code>::</code>.</p> <p>Rule id: <code>double-colon-spacing</code></p>"},{"location":"rules/standard/#keyword-spacing","title":"Keyword spacing","text":"<p>Consistent spacing around keywords.</p> <p>Rule id: <code>keyword-spacing</code></p>"},{"location":"rules/standard/#operator-spacing","title":"Operator spacing","text":"<p>Consistent spacing around operators.</p> <p>Rule id: <code>op-spacing</code></p>"},{"location":"rules/standard/#parenthesis-spacing","title":"Parenthesis spacing","text":"<p>Consistent spacing around parenthesis.</p> <p>Rule id: <code>paren-spacing</code></p>"},{"location":"rules/standard/#range-spacing","title":"Range spacing","text":"<p>Consistent spacing around range operators.</p> <p>Rule id: <code>range-spacing</code></p>"},{"location":"rules/standard/#angle-bracket-spacing","title":"Angle bracket spacing","text":"<p>No spaces around angle brackets when used for typing.</p> <p>Rule id: <code>spacing-around-angle-brackets</code></p>"},{"location":"rules/standard/#blank-line-between-declarations-with-annotations","title":"Blank line between declarations with annotations","text":"<p>Declarations with annotations should be separated by a blank line.</p> <p>Rule id: <code>spacing-between-declarations-with-annotations</code></p>"},{"location":"rules/standard/#blank-line-between-declaration-with-comments","title":"Blank line between declaration with comments","text":"<p>Declarations with comments should be separated by a blank line.</p> <p>Rule id: <code>spacing-between-declarations-with-comments</code></p>"},{"location":"rules/standard/#unary-operator-spacing","title":"Unary operator spacing","text":"<p>No spaces around unary operators.</p> <p>Rule id: <code>unary-op-spacing</code></p>"}]}